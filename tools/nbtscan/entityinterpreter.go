package nbtscan

import (
	"github.com/philcantcode/localmapper/cmdb"
	"github.com/philcantcode/localmapper/system"
	"github.com/philcantcode/localmapper/utils"
)

func (nbtResult NBTScan) ExtractEntities() []cmdb.Entity {
	sysTags := []cmdb.EntityTag{}

	if nbtResult.IP != "" && nbtResult.IP != "<unknown>" {
		tag := cmdb.EntityTag{
			Label:       "IP",
			Description: "IPv4 AddnbtResults",
			DataType:    system.DataType_IP,
			Values: []string{
				nbtResult.IP,
			},
		}

		sysTags = append(sysTags, tag)
	}

	if nbtResult.MAC != "" && nbtResult.MAC != "<unknown>" {
		tag := cmdb.EntityTag{
			Label:       "MAC",
			Description: "MAC AddnbtResults",
			DataType:    system.DataType_MAC,
			Values: []string{
				nbtResult.MAC,
			},
		}

		sysTags = append(sysTags, tag)
	}

	if nbtResult.NetBIOSName != "" && nbtResult.NetBIOSName != "<unknown>" {
		tag := cmdb.EntityTag{
			Label:       "NetBIOS Name",
			Description: "NetBIOS HostName",
			DataType:    system.DataType_STRING,
			Values: []string{
				nbtResult.NetBIOSName,
			},
		}

		sysTags = append(sysTags, tag)
	}

	if nbtResult.Server != "" && nbtResult.Server != "<server>" && nbtResult.Server != "<unknown>" {
		tag := cmdb.EntityTag{
			Label:       "HostName",
			Description: "System HostName",
			DataType:    system.DataType_STRING,
			Values: []string{
				nbtResult.Server,
			},
		}

		sysTags = append(sysTags, tag)
	}

	if nbtResult.Username != "" && nbtResult.Username != "<unknown>" {
		tag := cmdb.EntityTag{
			Label:       "Username",
			Description: "System Usernames",
			DataType:    system.DataType_USERNAME,
			Values: []string{
				nbtResult.Username,
			},
		}

		sysTags = append(sysTags, tag)
	}

	entry := cmdb.Entity{
		Label:       "NetBIOS Scan nbtResultult",
		Description: "This is was generated by running a NetBIOS scan (nbtscan).",
		OSILayer:    0,
		CMDBType:    cmdb.PENDING,
		DateSeen:    []string{utils.Now()},
		SysTags:     sysTags,
	}

	return []cmdb.Entity{entry}
}
